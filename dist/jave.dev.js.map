{"version":3,"sources":["jave.js"],"names":["canvas","document","getElementById","width","window","innerWidth","height","innerHeight","gl","getContext","console","error","time","vertexSource","fragmentSource","addEventListener","onWindowResize","viewport","uniform1f","widthHandle","heightHandle","compileShader","shaderSource","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getAttribLocation","program","name","attributeLocation","getUniformLocation","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","useProgram","vertexData","Float32Array","vertexDataBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","positionHandle","enableVertexAttribArray","vertexAttribPointer","FLOAT","timeHandle","lastFrame","Date","now","thisFrame","draw","drawArrays","TRIANGLE_STRIP","requestAnimationFrame"],"mappings":"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","sourcesContent":["var canvas = document.getElementById(\"canvas\");\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\n\nvar gl = canvas.getContext('webgl');\nif(!gl){\n  console.error(\"Unable to initialize WebGL.\");\n}\n\n\nvar time = 0.0;\n\n//************** Shader sources **************\n\nvar vertexSource = `\nattribute vec2 position;\nvoid main() {\n\tgl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nvar fragmentSource = `\nprecision highp float;\n\nuniform float width;\nuniform float height;\nvec2 resolution = vec2(width, height);\n\nuniform float time;\n\n#define POINT_COUNT 8\n\nvec2 points[POINT_COUNT];\nconst float speed = -0.5;\nconst float len = 0.25;\nfloat intensity = 1.3;\nfloat radius = 0.008;\n\n//https://www.shadertoy.com/view/MlKcDD\n//Signed distance to a quadratic bezier\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C){    \n\tvec2 a = B - A;\n\tvec2 b = A - 2.0*B + C;\n\tvec2 c = a * 2.0;\n\tvec2 d = A - pos;\n\n\tfloat kk = 1.0 / dot(b,b);\n\tfloat kx = kk * dot(a,b);\n\tfloat ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n\tfloat kz = kk * dot(d,a);      \n\n\tfloat res = 0.0;\n\n\tfloat p = ky - kx*kx;\n\tfloat p3 = p*p*p;\n\tfloat q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n\tfloat h = q*q + 4.0*p3;\n\n\tif(h >= 0.0){ \n\t\th = sqrt(h);\n\t\tvec2 x = (vec2(h, -h) - q) / 2.0;\n\t\tvec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n\t\tfloat t = uv.x + uv.y - kx;\n\t\tt = clamp( t, 0.0, 1.0 );\n\n\t\t// 1 root\n\t\tvec2 qos = d + (c + b*t)*t;\n\t\tres = length(qos);\n\t}else{\n\t\tfloat z = sqrt(-p);\n\t\tfloat v = acos( q/(p*z*2.0) ) / 3.0;\n\t\tfloat m = cos(v);\n\t\tfloat n = sin(v)*1.732050808;\n\t\tvec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n\t\tt = clamp( t, 0.0, 1.0 );\n\n\t\t// 3 roots\n\t\tvec2 qos = d + (c + b*t.x)*t.x;\n\t\tfloat dis = dot(qos,qos);\n        \n\t\tres = dis;\n\n\t\tqos = d + (c + b*t.y)*t.y;\n\t\tdis = dot(qos,qos);\n\t\tres = min(res,dis);\n\t\t\n\t\tqos = d + (c + b*t.z)*t.z;\n\t\tdis = dot(qos,qos);\n\t\tres = min(res,dis);\n\n\t\tres = sqrt( res );\n\t}\n    \n\treturn res;\n}\n\n\n//http://mathworld.wolfram.com/HeartCurve.html\nvec2 getHeartPosition(float t){\n\treturn vec2(16.0 * sin(t) * sin(t) * sin(t),\n\t\t\t\t\t\t\t-(13.0 * cos(t) - 5.0 * cos(2.0*t)\n\t\t\t\t\t\t\t- 2.0 * cos(3.0*t) - cos(4.0*t)));\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n\treturn pow(radius/dist, intensity);\n}\n\nfloat getSegment(float t, vec2 pos, float offset, float scale){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n\t\tpoints[i] = getHeartPosition(offset + float(i)*len + fract(speed * t) * 6.28);\n\t}\n    \n\tvec2 c = (points[0] + points[1]) / 2.0;\n\tvec2 c_prev;\n\tfloat dist = 10000.0;\n    \n\tfor(int i = 0; i < POINT_COUNT-1; i++){\n\t\t//https://tinyurl.com/y2htbwkm\n\t\tc_prev = c;\n\t\tc = (points[i] + points[i+1]) / 2.0;\n\t\tdist = min(dist, sdBezier(pos, scale * c_prev, scale * points[i], scale * c));\n\t}\n\treturn max(0.0, dist);\n}\n\nvoid main(){\n\tvec2 uv = gl_FragCoord.xy/resolution.xy;\n\tfloat widthHeightRatio = resolution.x/resolution.y;\n\tvec2 centre = vec2(0.5, 0.5);\n\tvec2 pos = centre - uv;\n\tpos.y /= widthHeightRatio;\n\t//Shift upwards to centre heart\n\tpos.y += 0.02;\n\tfloat scale = 0.000015 * height;\n\t\n\tfloat t = time;\n    \n\t//Get first segment\n  float dist = getSegment(t, pos, 0.0, scale);\n  float glow = getGlow(dist, radius, intensity);\n  \n  vec3 col = vec3(0.0);\n\n\t//White core\n  col += 10.0*vec3(smoothstep(0.003, 0.001, dist));\n  //Pink glow\n  col += glow * vec3(1.0,0.05,0.3);\n  \n  //Get second segment\n  dist = getSegment(t, pos, 3.4, scale);\n  glow = getGlow(dist, radius, intensity);\n  \n  //White core\n  col += 10.0*vec3(smoothstep(0.003, 0.001, dist));\n  //Blue glow\n  col += glow * vec3(0.1,0.4,1.0);\n        \n\t//Tone mapping\n\tcol = 1.0 - exp(-col);\n\n\t//Gamma\n\tcol = pow(col, vec3(0.4545));\n\n\t//Output to screen\n \tgl_FragColor = vec4(col,1.0);\n}\n`;\n\n\nwindow.addEventListener('resize', onWindowResize, false);\n\nfunction onWindowResize(){\n  canvas.width  = window.innerWidth;\n  canvas.height = window.innerHeight;\n\tgl.viewport(0, 0, canvas.width, canvas.height);\n  gl.uniform1f(widthHandle, window.innerWidth);\n  gl.uniform1f(heightHandle, window.innerHeight);\n}\n\n\nfunction compileShader(shaderSource, shaderType){\n  var shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n  if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){\n  \tthrow \"Shader compile failed with: \" + gl.getShaderInfoLog(shader);\n  }\n  return shader;\n}\n\nfunction getAttribLocation(program, name) {\n  var attributeLocation = gl.getAttribLocation(program, name);\n  if (attributeLocation === -1) {\n  \tthrow 'Cannot find attribute ' + name + '.';\n  }\n  return attributeLocation;\n}\n\nfunction getUniformLocation(program, name) {\n  var attributeLocation = gl.getUniformLocation(program, name);\n  if (attributeLocation === -1) {\n  \tthrow 'Cannot find uniform ' + name + '.';\n  }\n  return attributeLocation;\n}\n\nvar vertexShader = compileShader(vertexSource, gl.VERTEX_SHADER);\nvar fragmentShader = compileShader(fragmentSource, gl.FRAGMENT_SHADER);\n\n\nvar program = gl.createProgram();\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\ngl.linkProgram(program);\n\ngl.useProgram(program);\n\n\nvar vertexData = new Float32Array([\n  -1.0,  1.0, \t// top left\n  -1.0, -1.0, \t// bottom left\n   1.0,  1.0, \t// top right\n   1.0, -1.0, \t// bottom right\n]);\n\n\nvar vertexDataBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, vertexDataBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\n\n\nvar positionHandle = getAttribLocation(program, 'position');\n\ngl.enableVertexAttribArray(positionHandle);\ngl.vertexAttribPointer(positionHandle,\n  2, \t\t\t\t\n  gl.FLOAT, \n  false, \t\t\n  2 * 4, \t\t\n  0 \t\t\t\t\n  );\n\n\nvar timeHandle = getUniformLocation(program, 'time');\nvar widthHandle = getUniformLocation(program, 'width');\nvar heightHandle = getUniformLocation(program, 'height');\n\ngl.uniform1f(widthHandle, window.innerWidth);\ngl.uniform1f(heightHandle, window.innerHeight);\n\nvar lastFrame = Date.now();\nvar thisFrame;\n\nfunction draw(){\n\n\tthisFrame = Date.now();\n  time += (thisFrame - lastFrame)/1000;\t\n\tlastFrame = thisFrame;\n\n  gl.uniform1f(timeHandle, time);\n  \n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n  requestAnimationFrame(draw);\n}\n\ndraw();"],"file":"jave.dev.js"}